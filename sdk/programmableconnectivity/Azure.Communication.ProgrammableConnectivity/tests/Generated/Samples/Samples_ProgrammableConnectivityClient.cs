// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Communication.ProgrammableConnectivity;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Communication.ProgrammableConnectivity.Samples
{
    public partial class Samples_ProgrammableConnectivityClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LocationInterface_Verify_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
                latitude = 123.45F,
                longitude = 123.45F,
                accuracy = 1234,
                locationDevice = new object(),
            });
            Response response = client.Verify("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LocationInterface_Verify_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
                latitude = 123.45F,
                longitude = 123.45F,
                accuracy = 1234,
                locationDevice = new object(),
            });
            Response response = await client.VerifyAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LocationInterface_Verify_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            LocationVerifyRequest locationVerifyRequest = new LocationVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"), 123.45F, 123.45F, 1234, new LocationDevice());
            Response<LocationVerifyResponse> response = client.Verify("<apcGatewayId>", locationVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LocationInterface_Verify_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            LocationVerifyRequest locationVerifyRequest = new LocationVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"), 123.45F, 123.45F, 1234, new LocationDevice());
            Response<LocationVerifyResponse> response = await client.VerifyAsync("<apcGatewayId>", locationVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LocationInterface_Verify_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
                latitude = 123.45F,
                longitude = 123.45F,
                accuracy = 1234,
                locationDevice = new
                {
                    networkAccessIdentifier = "<networkAccessIdentifier>",
                    phoneNumber = "<phoneNumber>",
                    ipv4Address = new
                    {
                        ipv4 = "<ipv4>",
                        port = 1234,
                    },
                    ipv6Address = new
                    {
                        ipv6 = "<ipv6>",
                        port = 1234,
                    },
                },
            });
            Response response = client.Verify("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LocationInterface_Verify_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
                latitude = 123.45F,
                longitude = 123.45F,
                accuracy = 1234,
                locationDevice = new
                {
                    networkAccessIdentifier = "<networkAccessIdentifier>",
                    phoneNumber = "<phoneNumber>",
                    ipv4Address = new
                    {
                        ipv4 = "<ipv4>",
                        port = 1234,
                    },
                    ipv6Address = new
                    {
                        ipv6 = "<ipv6>",
                        port = 1234,
                    },
                },
            });
            Response response = await client.VerifyAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LocationInterface_Verify_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            LocationVerifyRequest locationVerifyRequest = new LocationVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"), 123.45F, 123.45F, 1234, new LocationDevice
            {
                NetworkAccessIdentifier = "<networkAccessIdentifier>",
                PhoneNumber = "<phoneNumber>",
                Ipv4Address = new Ipv4Address("<ipv4>", 1234),
                Ipv6Address = new Ipv6Address("<ipv6>", 1234),
            });
            Response<LocationVerifyResponse> response = client.Verify("<apcGatewayId>", locationVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LocationInterface_Verify_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            LocationVerifyRequest locationVerifyRequest = new LocationVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"), 123.45F, 123.45F, 1234, new LocationDevice
            {
                NetworkAccessIdentifier = "<networkAccessIdentifier>",
                PhoneNumber = "<phoneNumber>",
                Ipv4Address = new Ipv4Address("<ipv4>", 1234),
                Ipv6Address = new Ipv6Address("<ipv6>", 1234),
            });
            Response<LocationVerifyResponse> response = await client.VerifyAsync("<apcGatewayId>", locationVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Networks_Retrieve_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                identifierType = "<identifierType>",
                deviceIdentifier = "<deviceIdentifier>",
            });
            Response response = client.Retrieve("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("networkCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Networks_Retrieve_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                identifierType = "<identifierType>",
                deviceIdentifier = "<deviceIdentifier>",
            });
            Response response = await client.RetrieveAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("networkCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Networks_Retrieve_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            DeviceNetworkIdentifier deviceNetworkIdentifier = new DeviceNetworkIdentifier("<identifierType>", "<deviceIdentifier>");
            Response<Network> response = client.Retrieve("<apcGatewayId>", deviceNetworkIdentifier);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Networks_Retrieve_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            DeviceNetworkIdentifier deviceNetworkIdentifier = new DeviceNetworkIdentifier("<identifierType>", "<deviceIdentifier>");
            Response<Network> response = await client.RetrieveAsync("<apcGatewayId>", deviceNetworkIdentifier);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Networks_Retrieve_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                identifierType = "<identifierType>",
                deviceIdentifier = "<deviceIdentifier>",
            });
            Response response = client.Retrieve("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("networkCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Networks_Retrieve_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                identifierType = "<identifierType>",
                deviceIdentifier = "<deviceIdentifier>",
            });
            Response response = await client.RetrieveAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("networkCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Networks_Retrieve_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            DeviceNetworkIdentifier deviceNetworkIdentifier = new DeviceNetworkIdentifier("<identifierType>", "<deviceIdentifier>");
            Response<Network> response = client.Retrieve("<apcGatewayId>", deviceNetworkIdentifier);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Networks_Retrieve_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            DeviceNetworkIdentifier deviceNetworkIdentifier = new DeviceNetworkIdentifier("<identifierType>", "<deviceIdentifier>");
            Response<Network> response = await client.RetrieveAsync("<apcGatewayId>", deviceNetworkIdentifier);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberInterface_Verify_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
            });
            Response response = client.Verify("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberInterface_Verify_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
            });
            Response response = await client.VerifyAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberInterface_Verify_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            NumberVerifyRequest numberVerifyRequest = new NumberVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"));
            Response<NumberVerifyResponse> response = client.Verify("<apcGatewayId>", numberVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberInterface_Verify_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            NumberVerifyRequest numberVerifyRequest = new NumberVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"));
            Response<NumberVerifyResponse> response = await client.VerifyAsync("<apcGatewayId>", numberVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberInterface_Verify_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
                phoneNumber = "<phoneNumber>",
                hashedPhoneNumber = "<hashedPhoneNumber>",
            });
            Response response = client.Verify("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberInterface_Verify_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
                phoneNumber = "<phoneNumber>",
                hashedPhoneNumber = "<hashedPhoneNumber>",
            });
            Response response = await client.VerifyAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberInterface_Verify_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            NumberVerifyRequest numberVerifyRequest = new NumberVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"))
            {
                PhoneNumber = "<phoneNumber>",
                HashedPhoneNumber = "<hashedPhoneNumber>",
            };
            Response<NumberVerifyResponse> response = client.Verify("<apcGatewayId>", numberVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberInterface_Verify_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            NumberVerifyRequest numberVerifyRequest = new NumberVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"))
            {
                PhoneNumber = "<phoneNumber>",
                HashedPhoneNumber = "<hashedPhoneNumber>",
            };
            Response<NumberVerifyResponse> response = await client.VerifyAsync("<apcGatewayId>", numberVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberInterface_Retrieve_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                identifierType = "<identifierType>",
                identifier = "<identifier>",
            });
            Response response = client.Retrieve("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("phoneNumber").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberInterface_Retrieve_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                identifierType = "<identifierType>",
                identifier = "<identifier>",
            });
            Response response = await client.RetrieveAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("phoneNumber").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberInterface_Retrieve_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            NetworkIdentifier networkIdentifier = new NetworkIdentifier("<identifierType>", "<identifier>");
            Response<NumberRetrieveResponse> response = client.Retrieve("<apcGatewayId>", networkIdentifier);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberInterface_Retrieve_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            NetworkIdentifier networkIdentifier = new NetworkIdentifier("<identifierType>", "<identifier>");
            Response<NumberRetrieveResponse> response = await client.RetrieveAsync("<apcGatewayId>", networkIdentifier);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberInterface_Retrieve_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                identifierType = "<identifierType>",
                identifier = "<identifier>",
            });
            Response response = client.Retrieve("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("phoneNumber").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberInterface_Retrieve_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                identifierType = "<identifierType>",
                identifier = "<identifier>",
            });
            Response response = await client.RetrieveAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("phoneNumber").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NumberInterface_Retrieve_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            NetworkIdentifier networkIdentifier = new NetworkIdentifier("<identifierType>", "<identifier>");
            Response<NumberRetrieveResponse> response = client.Retrieve("<apcGatewayId>", networkIdentifier);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NumberInterface_Retrieve_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            NetworkIdentifier networkIdentifier = new NetworkIdentifier("<identifierType>", "<identifier>");
            Response<NumberRetrieveResponse> response = await client.RetrieveAsync("<apcGatewayId>", networkIdentifier);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SimSwapInterface_Retrieve_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                phoneNumber = "<phoneNumber>",
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
            });
            Response response = client.Retrieve("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("date").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SimSwapInterface_Retrieve_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                phoneNumber = "<phoneNumber>",
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
            });
            Response response = await client.RetrieveAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("date").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SimSwapInterface_Retrieve_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            SimSwapRetrieveRequest simSwapRetrieveRequest = new SimSwapRetrieveRequest("<phoneNumber>", new NetworkIdentifier("<identifierType>", "<identifier>"));
            Response<SimSwapRetrieveResponse> response = client.Retrieve("<apcGatewayId>", simSwapRetrieveRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SimSwapInterface_Retrieve_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            SimSwapRetrieveRequest simSwapRetrieveRequest = new SimSwapRetrieveRequest("<phoneNumber>", new NetworkIdentifier("<identifierType>", "<identifier>"));
            Response<SimSwapRetrieveResponse> response = await client.RetrieveAsync("<apcGatewayId>", simSwapRetrieveRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SimSwapInterface_Retrieve_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                phoneNumber = "<phoneNumber>",
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
            });
            Response response = client.Retrieve("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("date").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SimSwapInterface_Retrieve_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                phoneNumber = "<phoneNumber>",
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
            });
            Response response = await client.RetrieveAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("date").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SimSwapInterface_Retrieve_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            SimSwapRetrieveRequest simSwapRetrieveRequest = new SimSwapRetrieveRequest("<phoneNumber>", new NetworkIdentifier("<identifierType>", "<identifier>"));
            Response<SimSwapRetrieveResponse> response = client.Retrieve("<apcGatewayId>", simSwapRetrieveRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SimSwapInterface_Retrieve_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            SimSwapRetrieveRequest simSwapRetrieveRequest = new SimSwapRetrieveRequest("<phoneNumber>", new NetworkIdentifier("<identifierType>", "<identifier>"));
            Response<SimSwapRetrieveResponse> response = await client.RetrieveAsync("<apcGatewayId>", simSwapRetrieveRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SimSwapInterface_Verify_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
            });
            Response response = client.Verify("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SimSwapInterface_Verify_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
            });
            Response response = await client.VerifyAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SimSwapInterface_Verify_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            SimSwapVerifyRequest simSwapVerifyRequest = new SimSwapVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"));
            Response<SimSwapVerifyResponse> response = client.Verify("<apcGatewayId>", simSwapVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SimSwapInterface_Verify_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            SimSwapVerifyRequest simSwapVerifyRequest = new SimSwapVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"));
            Response<SimSwapVerifyResponse> response = await client.VerifyAsync("<apcGatewayId>", simSwapVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SimSwapInterface_Verify_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                maxAgeHours = 1234,
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
            });
            Response response = client.Verify("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SimSwapInterface_Verify_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                maxAgeHours = 1234,
                networkIdentifier = new
                {
                    identifierType = "<identifierType>",
                    identifier = "<identifier>",
                },
            });
            Response response = await client.VerifyAsync("<apcGatewayId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("verified").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SimSwapInterface_Verify_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            SimSwapVerifyRequest simSwapVerifyRequest = new SimSwapVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"))
            {
                MaxAgeHours = 1234,
            };
            Response<SimSwapVerifyResponse> response = client.Verify("<apcGatewayId>", simSwapVerifyRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SimSwapInterface_Verify_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ProgrammableConnectivityClient client = new ProgrammableConnectivityClient(endpoint, credential);

            SimSwapVerifyRequest simSwapVerifyRequest = new SimSwapVerifyRequest(new NetworkIdentifier("<identifierType>", "<identifier>"))
            {
                MaxAgeHours = 1234,
            };
            Response<SimSwapVerifyResponse> response = await client.VerifyAsync("<apcGatewayId>", simSwapVerifyRequest);
        }
    }
}
