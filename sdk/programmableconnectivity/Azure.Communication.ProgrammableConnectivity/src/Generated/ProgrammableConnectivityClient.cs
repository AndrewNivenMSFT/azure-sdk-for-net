// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Communication.ProgrammableConnectivity
{
    // Data plane generated client.
    /// <summary> The ProgrammableConnectivity service client. </summary>
    public partial class ProgrammableConnectivityClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://programmableconnectivity.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ProgrammableConnectivityClient for mocking. </summary>
        protected ProgrammableConnectivityClient()
        {
        }

        /// <summary> Initializes a new instance of ProgrammableConnectivityClient. </summary>
        /// <param name="endpoint"> An Azure Programmable Connectivity Endpoint providing access to Network APIs, for example https://{region}.apcgatewayapi.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ProgrammableConnectivityClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new ProgrammableConnectivityClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ProgrammableConnectivityClient. </summary>
        /// <param name="endpoint"> An Azure Programmable Connectivity Endpoint providing access to Network APIs, for example https://{region}.apcgatewayapi.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ProgrammableConnectivityClient(Uri endpoint, TokenCredential credential, ProgrammableConnectivityClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new ProgrammableConnectivityClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Verifies whether a device is within a specified location area, defined as an accuracy (radius) around a point, specified by longitude and latitude. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="locationVerifyRequest"> Request to verify Location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="locationVerifyRequest"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='VerifyAsync(string,LocationVerifyRequest,CancellationToken)']/*" />
        public virtual async Task<Response<LocationVerifyResponse>> VerifyAsync(string apcGatewayId, LocationVerifyRequest locationVerifyRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(locationVerifyRequest, nameof(locationVerifyRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = locationVerifyRequest.ToRequestContent();
            Response response = await VerifyAsync(apcGatewayId, content, context).ConfigureAwait(false);
            return Response.FromValue(LocationVerifyResponse.FromResponse(response), response);
        }

        /// <summary> Verifies whether a device is within a specified location area, defined as an accuracy (radius) around a point, specified by longitude and latitude. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="locationVerifyRequest"> Request to verify Location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="locationVerifyRequest"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Verify(string,LocationVerifyRequest,CancellationToken)']/*" />
        public virtual Response<LocationVerifyResponse> Verify(string apcGatewayId, LocationVerifyRequest locationVerifyRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(locationVerifyRequest, nameof(locationVerifyRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = locationVerifyRequest.ToRequestContent();
            Response response = Verify(apcGatewayId, content, context);
            return Response.FromValue(LocationVerifyResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Verifies whether a device is within a specified location area, defined as an accuracy (radius) around a point, specified by longitude and latitude.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="VerifyAsync(string,LocationVerifyRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='VerifyAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> VerifyAsync(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Verify");
            scope.Start();
            try
            {
                using HttpMessage message = CreateVerifyRequest(apcGatewayId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Verifies whether a device is within a specified location area, defined as an accuracy (radius) around a point, specified by longitude and latitude.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Verify(string,LocationVerifyRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Verify(string,RequestContent,RequestContext)']/*" />
        public virtual Response Verify(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Verify");
            scope.Start();
            try
            {
                using HttpMessage message = CreateVerifyRequest(apcGatewayId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves the network a given device is on. Returns network in a networkCode format that can be used for other APIs. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="deviceNetworkIdentifier"> The device for which to find the network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="deviceNetworkIdentifier"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='RetrieveAsync(string,DeviceNetworkIdentifier,CancellationToken)']/*" />
        public virtual async Task<Response<Network>> RetrieveAsync(string apcGatewayId, DeviceNetworkIdentifier deviceNetworkIdentifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(deviceNetworkIdentifier, nameof(deviceNetworkIdentifier));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = deviceNetworkIdentifier.ToRequestContent();
            Response response = await RetrieveAsync(apcGatewayId, content, context).ConfigureAwait(false);
            return Response.FromValue(Network.FromResponse(response), response);
        }

        /// <summary> Retrieves the network a given device is on. Returns network in a networkCode format that can be used for other APIs. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="deviceNetworkIdentifier"> The device for which to find the network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="deviceNetworkIdentifier"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Retrieve(string,DeviceNetworkIdentifier,CancellationToken)']/*" />
        public virtual Response<Network> Retrieve(string apcGatewayId, DeviceNetworkIdentifier deviceNetworkIdentifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(deviceNetworkIdentifier, nameof(deviceNetworkIdentifier));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = deviceNetworkIdentifier.ToRequestContent();
            Response response = Retrieve(apcGatewayId, content, context);
            return Response.FromValue(Network.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieves the network a given device is on. Returns network in a networkCode format that can be used for other APIs.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RetrieveAsync(string,DeviceNetworkIdentifier,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='RetrieveAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> RetrieveAsync(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Retrieve");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRetrieveRequest(apcGatewayId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieves the network a given device is on. Returns network in a networkCode format that can be used for other APIs.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Retrieve(string,DeviceNetworkIdentifier,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Retrieve(string,RequestContent,RequestContext)']/*" />
        public virtual Response Retrieve(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Retrieve");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRetrieveRequest(apcGatewayId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Verifies the phone number (MSISDN) associated with a device. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="numberVerifyRequest"> Request to verify number of device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="numberVerifyRequest"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='VerifyAsync(string,NumberVerifyRequest,CancellationToken)']/*" />
        public virtual async Task<Response<NumberVerifyResponse>> VerifyAsync(string apcGatewayId, NumberVerifyRequest numberVerifyRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(numberVerifyRequest, nameof(numberVerifyRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = numberVerifyRequest.ToRequestContent();
            Response response = await VerifyAsync(apcGatewayId, content, context).ConfigureAwait(false);
            return Response.FromValue(NumberVerifyResponse.FromResponse(response), response);
        }

        /// <summary> Verifies the phone number (MSISDN) associated with a device. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="numberVerifyRequest"> Request to verify number of device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="numberVerifyRequest"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Verify(string,NumberVerifyRequest,CancellationToken)']/*" />
        public virtual Response<NumberVerifyResponse> Verify(string apcGatewayId, NumberVerifyRequest numberVerifyRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(numberVerifyRequest, nameof(numberVerifyRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = numberVerifyRequest.ToRequestContent();
            Response response = Verify(apcGatewayId, content, context);
            return Response.FromValue(NumberVerifyResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Verifies the phone number (MSISDN) associated with a device.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="VerifyAsync(string,NumberVerifyRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='VerifyAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> VerifyAsync(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Verify");
            scope.Start();
            try
            {
                using HttpMessage message = CreateVerifyRequest(apcGatewayId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Verifies the phone number (MSISDN) associated with a device.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Verify(string,NumberVerifyRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Verify(string,RequestContent,RequestContext)']/*" />
        public virtual Response Verify(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Verify");
            scope.Start();
            try
            {
                using HttpMessage message = CreateVerifyRequest(apcGatewayId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves the phone number (MSISDN) associated with a device. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="networkIdentifier"> Identifier for the network to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="networkIdentifier"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='RetrieveAsync(string,NetworkIdentifier,CancellationToken)']/*" />
        public virtual async Task<Response<NumberRetrieveResponse>> RetrieveAsync(string apcGatewayId, NetworkIdentifier networkIdentifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(networkIdentifier, nameof(networkIdentifier));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = networkIdentifier.ToRequestContent();
            Response response = await RetrieveAsync(apcGatewayId, content, context).ConfigureAwait(false);
            return Response.FromValue(NumberRetrieveResponse.FromResponse(response), response);
        }

        /// <summary> Retrieves the phone number (MSISDN) associated with a device. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="networkIdentifier"> Identifier for the network to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="networkIdentifier"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Retrieve(string,NetworkIdentifier,CancellationToken)']/*" />
        public virtual Response<NumberRetrieveResponse> Retrieve(string apcGatewayId, NetworkIdentifier networkIdentifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(networkIdentifier, nameof(networkIdentifier));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = networkIdentifier.ToRequestContent();
            Response response = Retrieve(apcGatewayId, content, context);
            return Response.FromValue(NumberRetrieveResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Retrieves the phone number (MSISDN) associated with a device.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RetrieveAsync(string,NetworkIdentifier,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='RetrieveAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> RetrieveAsync(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Retrieve");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRetrieveRequest(apcGatewayId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Retrieves the phone number (MSISDN) associated with a device.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Retrieve(string,NetworkIdentifier,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Retrieve(string,RequestContent,RequestContext)']/*" />
        public virtual Response Retrieve(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Retrieve");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRetrieveRequest(apcGatewayId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Provides timestamp of latest SIM swap. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="simSwapRetrieveRequest"> Request to retrieve SimSwap date. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="simSwapRetrieveRequest"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='RetrieveAsync(string,SimSwapRetrieveRequest,CancellationToken)']/*" />
        public virtual async Task<Response<SimSwapRetrieveResponse>> RetrieveAsync(string apcGatewayId, SimSwapRetrieveRequest simSwapRetrieveRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(simSwapRetrieveRequest, nameof(simSwapRetrieveRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = simSwapRetrieveRequest.ToRequestContent();
            Response response = await RetrieveAsync(apcGatewayId, content, context).ConfigureAwait(false);
            return Response.FromValue(SimSwapRetrieveResponse.FromResponse(response), response);
        }

        /// <summary> Provides timestamp of latest SIM swap. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="simSwapRetrieveRequest"> Request to retrieve SimSwap date. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="simSwapRetrieveRequest"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Retrieve(string,SimSwapRetrieveRequest,CancellationToken)']/*" />
        public virtual Response<SimSwapRetrieveResponse> Retrieve(string apcGatewayId, SimSwapRetrieveRequest simSwapRetrieveRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(simSwapRetrieveRequest, nameof(simSwapRetrieveRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = simSwapRetrieveRequest.ToRequestContent();
            Response response = Retrieve(apcGatewayId, content, context);
            return Response.FromValue(SimSwapRetrieveResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Provides timestamp of latest SIM swap
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="RetrieveAsync(string,SimSwapRetrieveRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='RetrieveAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> RetrieveAsync(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Retrieve");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRetrieveRequest(apcGatewayId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Provides timestamp of latest SIM swap
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Retrieve(string,SimSwapRetrieveRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Retrieve(string,RequestContent,RequestContext)']/*" />
        public virtual Response Retrieve(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Retrieve");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRetrieveRequest(apcGatewayId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Verifies if a SIM swap has been performed during a past period (defined in the request with 'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="simSwapVerifyRequest"> Request to verify SimSwap in period. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="simSwapVerifyRequest"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='VerifyAsync(string,SimSwapVerifyRequest,CancellationToken)']/*" />
        public virtual async Task<Response<SimSwapVerifyResponse>> VerifyAsync(string apcGatewayId, SimSwapVerifyRequest simSwapVerifyRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(simSwapVerifyRequest, nameof(simSwapVerifyRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = simSwapVerifyRequest.ToRequestContent();
            Response response = await VerifyAsync(apcGatewayId, content, context).ConfigureAwait(false);
            return Response.FromValue(SimSwapVerifyResponse.FromResponse(response), response);
        }

        /// <summary> Verifies if a SIM swap has been performed during a past period (defined in the request with 'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured. </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="simSwapVerifyRequest"> Request to verify SimSwap in period. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="simSwapVerifyRequest"/> is null. </exception>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Verify(string,SimSwapVerifyRequest,CancellationToken)']/*" />
        public virtual Response<SimSwapVerifyResponse> Verify(string apcGatewayId, SimSwapVerifyRequest simSwapVerifyRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(simSwapVerifyRequest, nameof(simSwapVerifyRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = simSwapVerifyRequest.ToRequestContent();
            Response response = Verify(apcGatewayId, content, context);
            return Response.FromValue(SimSwapVerifyResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Verifies if a SIM swap has been performed during a past period (defined in the request with 'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="VerifyAsync(string,SimSwapVerifyRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='VerifyAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> VerifyAsync(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Verify");
            scope.Start();
            try
            {
                using HttpMessage message = CreateVerifyRequest(apcGatewayId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Verifies if a SIM swap has been performed during a past period (defined in the request with 'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Verify(string,SimSwapVerifyRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="apcGatewayId"> The identifier of the APC Gateway resource which should handle this request. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apcGatewayId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProgrammableConnectivityClient.xml" path="doc/members/member[@name='Verify(string,RequestContent,RequestContext)']/*" />
        public virtual Response Verify(string apcGatewayId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(apcGatewayId, nameof(apcGatewayId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProgrammableConnectivityClient.Verify");
            scope.Start();
            try
            {
                using HttpMessage message = CreateVerifyRequest(apcGatewayId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateVerifyRequest(string apcGatewayId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/Apis/Location:verify", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("apc-gateway-id", apcGatewayId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRetrieveRequest(string apcGatewayId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/Apis/Network:retrieve", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("apc-gateway-id", apcGatewayId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateVerifyRequest(string apcGatewayId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/Apis/Number:verify", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("apc-gateway-id", apcGatewayId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRetrieveRequest(string apcGatewayId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/Apis/Number:retrieve", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("apc-gateway-id", apcGatewayId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRetrieveRequest(string apcGatewayId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/device/SimSwap:retrieve", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("apc-gateway-id", apcGatewayId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateVerifyRequest(string apcGatewayId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/device/SimSwap:verify", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("apc-gateway-id", apcGatewayId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
