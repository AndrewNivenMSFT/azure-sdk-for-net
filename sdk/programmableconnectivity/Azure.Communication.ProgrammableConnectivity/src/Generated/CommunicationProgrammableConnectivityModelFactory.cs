// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Communication.ProgrammableConnectivity
{
    /// <summary> Model factory for models. </summary>
    public static partial class CommunicationProgrammableConnectivityModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.LocationVerifyResponse"/>. </summary>
        /// <param name="verified"> True if the location is verified, False otherwise. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.LocationVerifyResponse"/> instance for mocking. </returns>
        public static LocationVerifyResponse LocationVerifyResponse(bool verified = default)
        {
            return new LocationVerifyResponse(verified);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.Network"/>. </summary>
        /// <param name="networkCode"> The identifier for the network. This can be used as the networkIdentifier for the service APIs. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkCode"/> is null. </exception>
        /// <returns> A new <see cref="ProgrammableConnectivity.Network"/> instance for mocking. </returns>
        public static Network Network(string networkCode = null)
        {
            if (networkCode == null)
            {
                throw new ArgumentNullException(nameof(networkCode));
            }

            return new Network(networkCode);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.NumberVerifyResponse"/>. </summary>
        /// <param name="verified"> True if number is verified, False otherwise. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.NumberVerifyResponse"/> instance for mocking. </returns>
        public static NumberVerifyResponse NumberVerifyResponse(bool verified = default)
        {
            return new NumberVerifyResponse(verified);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.NumberRetrieveResponse"/>. </summary>
        /// <param name="phoneNumber"> Phone number in E.164 format (starting with country code), and optionally prefixed with '+'. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="phoneNumber"/> is null. </exception>
        /// <returns> A new <see cref="ProgrammableConnectivity.NumberRetrieveResponse"/> instance for mocking. </returns>
        public static NumberRetrieveResponse NumberRetrieveResponse(string phoneNumber = null)
        {
            if (phoneNumber == null)
            {
                throw new ArgumentNullException(nameof(phoneNumber));
            }

            return new NumberRetrieveResponse(phoneNumber);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.SimSwapRetrieveResponse"/>. </summary>
        /// <param name="date"> Datetime of most recent swap for SIM. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.SimSwapRetrieveResponse"/> instance for mocking. </returns>
        public static SimSwapRetrieveResponse SimSwapRetrieveResponse(DateTimeOffset date = default)
        {
            return new SimSwapRetrieveResponse(date);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.SimSwapVerifyResponse"/>. </summary>
        /// <param name="verified"> True if the SIM has swapped in the specified period, False otherwise. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.SimSwapVerifyResponse"/> instance for mocking. </returns>
        public static SimSwapVerifyResponse SimSwapVerifyResponse(bool verified = default)
        {
            return new SimSwapVerifyResponse(verified);
        }
    }
}
